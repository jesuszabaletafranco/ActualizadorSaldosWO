<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Funciones" xml:space="preserve">
    <value>
/* Consultar las ultimas consultasen la DDBB */
/*SELECT deqs.last_execution_time AS [Time], dest.text AS [Query]
FROM sys.dm_exec_query_stats AS deqs
CROSS APPLY sys.dm_exec_sql_text(deqs.sql_handle) AS dest
ORDER BY deqs.last_execution_time DESC;*/

/* COLGAAP */

SET ANSI_NULLS, QUOTED_IDENTIFIER ON
GO

/* Consultas SQL WO */

IF OBJECT_ID (N'dbo.vw_ca_saldos_cg', N'U') IS NOT NULL  
    DROP TABLE vw_ca_saldos_cg;
GO

CREATE TABLE vw_ca_saldos_cg(
 ano INTEGER, 
 mes INTEGER,
 codigo VARCHAR(20), 
 descripcion TEXT, 
 efecto numeric(28,6),
 saldo_inicial numeric(28,6), 
 debito numeric(28,6), 
 credito numeric(28,6), 
 saldo_final numeric(28,6)
);

/* NIIF */
IF OBJECT_ID (N'dbo.UfnGetSaldoInicialCG', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetSaldoInicialCG;  
GO

IF OBJECT_ID (N'dbo.UfnGetDebitoCG', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetDebitoCG;  
GO  

IF OBJECT_ID (N'dbo.UfnGetCreditoCG', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetCreditoCG;  
GO

IF EXISTS ( SELECT * 
            FROM   sysobjects 
            WHERE  id = object_id(N'[dbo].[spEliminarSaldoCuentaPeriodoCG]') 
                   and OBJECTPROPERTY(id, N'IsProcedure') = 1 )
 BEGIN
  DROP PROCEDURE [dbo].[spEliminarSaldoCuentaPeriodoCG]
 END
GO

CREATE PROCEDURE dbo.spEliminarSaldoCuentaPeriodoCG (@Ano INTEGER ) WITH ENCRYPTION
 AS
  BEGIN  
   DELETE FROM vw_ca_saldos_cg WHERE ano &gt;=@Ano;
  END;
GO

CREATE FUNCTION dbo.UfnGetSaldoInicialCG(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
)  
RETURNS numeric(28,6)   WITH ENCRYPTION 
AS   
-- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaFinTempSaldoInicial datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @SaldoInicial numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaFinTempSaldoInicial =  DATEADD(DAY,-1, CAST(convert(datetime, @FechaIni, 103) + ' 23:59:59' AS DATETIME))
 --Calculo del saldo inicial
 SELECT @SaldoInicial = COALESCE(Sum(([Débito]-[Crédito])*[Efecto]), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS = 0 AND CCA.[IdCuentaContableDocumento] &lt;&gt; 'CCR' AND 
 CCA.Fecha &lt;= @FechaFinTempSaldoInicial AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @SaldoInicial
END;  
GO

CREATE FUNCTION dbo.UfnGetDebitoCG(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@FechaFin        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
) RETURNS numeric(28,6)   WITH ENCRYPTION AS   
 -- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaIniTemp datetime,
 @FechaFinTemp datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @debito numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaIniTemp = CAST(convert(datetime, @FechaIni, 103) + ' 00:00:00' AS DATETIME)
 set @FechaFinTemp = CAST(convert(datetime, @FechaFin, 103) + ' 23:59:59' AS DATETIME)
 
 --Calculo del Movimiento Debito y credito
 SELECT @Debito = COALESCE(Sum([Débito]), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP 
 INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable 
 INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable 
 INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS = 0 AND CCA.[IdCuentaContableDocumento] &lt;&gt; 'CCR' AND 
 CCA.Fecha Between @FechaIniTemp And @FechaFinTemp AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @Debito
END;  
GO

CREATE FUNCTION dbo.UfnGetCreditoCG(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@FechaFin        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
)  
RETURNS numeric(28,6)   WITH ENCRYPTION
AS   
-- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaIniTemp datetime,
 @FechaFinTemp datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @credito numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaIniTemp = CAST(convert(datetime, @FechaIni, 103) + ' 00:00:00' AS DATETIME)
 set @FechaFinTemp = CAST(convert(datetime, @FechaFin, 103) + ' 23:59:59' AS DATETIME)
 
 --Calculo del Movimiento Debito y credito
 SELECT @credito = COALESCE(Sum(Crédito), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP 
 INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable 
 INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable 
 INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS = 0 AND  CCA.[IdCuentaContableDocumento] &lt;&gt; 'CCR' AND 
 CCA.Fecha Between @FechaIniTemp And @FechaFinTemp AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @Credito
END;  
GO

/* NIIF */

IF OBJECT_ID (N'dbo.vw_ca_saldos', N'U') IS NOT NULL  
    DROP TABLE vw_ca_saldos;
GO

CREATE TABLE vw_ca_saldos(
 ano INTEGER, 
 mes INTEGER,
 codigo VARCHAR(20), 
 descripcion TEXT, 
 saldo_inicial numeric(28,6), 
 debito numeric(28,6), 
 credito numeric(28,6), 
 saldo_final numeric(28,6)
);

/* NIIF */
IF OBJECT_ID (N'dbo.UfnGetSaldoInicial', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetSaldoInicial;  
GO

IF OBJECT_ID (N'dbo.UfnGetDebito', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetDebito;  
GO  

IF OBJECT_ID (N'dbo.UfnGetCredito', N'FN') IS NOT NULL  
    DROP FUNCTION UfnGetCredito;  
GO

IF EXISTS ( SELECT * 
            FROM   sysobjects 
            WHERE  id = object_id(N'[dbo].[spEliminarSaldoCuentaPeriodo]') 
                   and OBJECTPROPERTY(id, N'IsProcedure') = 1 )
 BEGIN
  DROP PROCEDURE [dbo].[spEliminarSaldoCuentaPeriodo]
 END
GO

CREATE PROCEDURE dbo.spEliminarSaldoCuentaPeriodo (@Ano INTEGER ) WITH ENCRYPTION
 AS
  BEGIN  
   DELETE FROM vw_ca_saldos WHERE ano &gt;=@Ano;
  END;
GO

CREATE FUNCTION dbo.UfnGetSaldoInicial(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
)  
RETURNS numeric(28,6)   WITH ENCRYPTION 
AS   
-- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaFinTempSaldoInicial datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @SaldoInicial numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaFinTempSaldoInicial =  DATEADD(DAY,-1, CAST(convert(datetime, @FechaIni, 103) + ' 23:59:59' AS DATETIME))
 --Calculo del saldo inicial
 SELECT @SaldoInicial = COALESCE(Sum(([Débito]-[Crédito])*[Efecto]), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS &lt;&gt; -1 AND 
 CCA.Fecha &lt;= @FechaFinTempSaldoInicial AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @SaldoInicial
END;  

GO
CREATE FUNCTION dbo.UfnGetDebito(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@FechaFin        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
) RETURNS numeric(28,6)   WITH ENCRYPTION AS   
 -- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaIniTemp datetime,
 @FechaFinTemp datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @debito numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaIniTemp = CAST(convert(datetime, @FechaIni, 103) + ' 00:00:00' AS DATETIME)
 set @FechaFinTemp = CAST(convert(datetime, @FechaFin, 103) + ' 23:59:59' AS DATETIME)
 
 --Calculo del Movimiento Debito y credito
 SELECT @Debito = COALESCE(Sum([Débito]), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP 
 INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable 
 INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable 
 INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS &lt;&gt; -1 AND 
 CCA.Fecha Between @FechaIniTemp And @FechaFinTemp AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @Debito
END;  
GO

CREATE FUNCTION dbo.UfnGetCredito(
@Cuenta          nvarchar(100)='',
@FechaIni        nvarchar(10) = '',
@FechaFin        nvarchar(10) = '',
@CodTercero    nvarchar(100) = NULL,
@EmpresasIncluir nvarchar(4000) = '',
@IdCentroCosto   int = NULL
)  
RETURNS numeric(28,6)   WITH ENCRYPTION
AS   
-- Returns the stock level for the product.  
BEGIN  
    DECLARE
 @FechaIniTemp datetime,
 @FechaFinTemp datetime,
 @CantAleatoria int,
 @IdTercero int,
 @numRows int,
 @Efecto int,
 @credito numeric(28,6) 
  
 IF NOT(@CodTercero IS NULL OR @CodTercero ='')
 BEGIN
  SELECT @IdTercero=IdTercero  FROM Terceros WHERE Identificacion = @CodTercero
  set @numRows = @@ROWCOUNT

  IF @numRows = 0 
  BEGIN
   --SELECT 'No Existe Código : ' + @CodTercero as CampoValor
   RETURN 0
  END

  IF @numRows &gt; 1 
  BEGIN
   --SELECT 'Código Duplicado : ' + @CodTercero as CampoValor
   RETURN 0
  END
 END
 --set @CantAleatoria = ROUND(((9999999) * RAND()), 0) * -1
 set @CantAleatoria = 1
 set @FechaIniTemp = CAST(convert(datetime, @FechaIni, 103) + ' 00:00:00' AS DATETIME)
 set @FechaFinTemp = CAST(convert(datetime, @FechaFin, 103) + ' 23:59:59' AS DATETIME)
 
 --Calculo del Movimiento Debito y credito
 SELECT @credito = COALESCE(Sum(Crédito), 0)
 FROM [CuentasContables - Tipos] AS CCA_TIP 
 INNER JOIN [CuentasContables - Naturaleza] AS CCA_NAT ON CCA_TIP.IdNaturalezaDeCuentaContable = CCA_NAT.IdNaturalezaDeCuentaContable 
 INNER JOIN [CuentasContables - Asientos] AS CCA INNER JOIN [CuentasContables - Asientos - Detalles] AS CCA_D ON CCA.IdAsientoContable = CCA_D.IdAsientoContable 
 INNER JOIN CuentasContables AS CC ON CCA_D.IdCuentaContable = CC.IdCuentaContable ON CCA_TIP.IdCuentasContablesTipos = CC.IdCuentasContablesTipos 
 WHERE CCA_D.SenalExcNIIFS &lt;&gt; -1 AND 
 CCA.Fecha Between @FechaIniTemp And @FechaFinTemp AND
 IdEmpresa IN(select number from iter$simple_intlist_to_tbl(@EmpresasIncluir)) AND
 COALESCE(CCA_D.IdClasificación,@CantAleatoria)=COALESCE(@IdCentroCosto,CCA_D.IdClasificación,@CantAleatoria) AND
 CCA_D.IdTercero = COALESCE(@IdTercero,CCA_D.IdTercero) AND
 CC.IdCuentaContable IN(select number from iter$simple_intlist_to_tbl_Cuentas(@Cuenta))

 RETURN @Credito
END;  
GO</value>
  </data>
</root>